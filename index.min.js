"use strict";

// --- Global On-Screen Error Display ---
var errorDisplayTimeoutId = null; // To manage a global timeout for the display itself

window.onerror = function(message, source, lineno, colno, error) {
    try {
        var errorDisplayId = 'kindleClockErrorDisplay';
        var errorDiv = document.getElementById(errorDisplayId);
        if (!errorDiv && document.body) { 
            errorDiv = document.createElement('div');
            errorDiv.id = errorDisplayId;
            errorDiv.style.position = 'fixed';
            errorDiv.style.bottom = '0px';
            errorDiv.style.left = '0px';
            errorDiv.style.width = '100%';
            errorDiv.style.maxHeight = '100px';
            errorDiv.style.overflowY = 'auto';
            errorDiv.style.backgroundColor = 'rgba(255,0,0,0.7)';
            errorDiv.style.color = 'white';
            errorDiv.style.padding = '5px';
            errorDiv.style.zIndex = '99999';
            errorDiv.style.fontSize = '10px';
            errorDiv.style.fontFamily = 'monospace';
            errorDiv.style.boxSizing = 'border-box';
            errorDiv.style.transition = 'opacity 0.5s ease-out'; // For smooth fade
            errorDiv.style.opacity = '1'; // Make it visible initially
            document.body.appendChild(errorDiv);
        }
        
        if (errorDiv) {
            errorDiv.style.opacity = '1'; // Ensure it's visible when a new message comes
            if (errorDisplayTimeoutId) {
                clearTimeout(errorDisplayTimeoutId); // Clear previous global hide timeout
            }

            var errorMsgElement = document.createElement('p');
            errorMsgElement.style.margin = '2px 0';
            errorMsgElement.style.borderBottom = '1px solid #ffaaaa';
            var sourceName = source ? source.substring(source.lastIndexOf('/') + 1) : 'unknown_source';
            errorMsgElement.innerHTML = String(message) + (source ? (' at ' + sourceName + ':' + lineno) : '');
            
            if (errorDiv.firstChild) {
                errorDiv.insertBefore(errorMsgElement, errorDiv.firstChild);
            } else {
                errorDiv.appendChild(errorMsgElement);
            }

            // Remove oldest messages if more than, say, 5
            while (errorDiv.childNodes.length > 5) {
                errorDiv.removeChild(errorDiv.lastChild);
            }

            // Set a timeout to hide the entire log div
            errorDisplayTimeoutId = setTimeout(function() {
                if (errorDiv) {
                    errorDiv.style.opacity = '0';
                    // Optionally, make it non-interactive when hidden
                    // errorDiv.style.pointerEvents = 'none'; 
                }
            }, 10000); // Hide after 10 seconds of inactivity
        } else {
             var alertMsg = "Error: " + message;
             if(typeof alert !== "undefined") alert(alertMsg);
        }
    } catch (e) {
        if(typeof alert !== "undefined") alert('Critical error in error handler: ' + e.toString() + '\nOriginal error: ' + message);
    }
    return true; 
};

// --- Helper to log to on-screen display ---
function console_log_on_screen(message) {
    // This will trigger the window.onerror and its hiding logic
    window.onerror(message, "LOG", 0, 0, null); 
}

// --- Globals (initialized in DOMContentLoaded) ---
var domApp, domTime, domDate, domCnDate, domFestival;
var urlQuery;
var config; // Made global for oled.js
var scriptLoadDateNormalized;

// --- Helper Functions ---
function geturl(queryString) { // Takes query string like location.search
    var items = {};
    if (!queryString || queryString.length < 2) { // e.g. "" or "?"
        return items;
    }
    var query = queryString.substring(1); // Remove '?'
    var res = query.split("&");
    for (var i = 0; i < res.length; i++) {
        var a = res[i].split("=");
        if (a.length > 0 && a[0]) { // Check if key exists
             try {
                var key = decodeURIComponent(a[0]);
                var value = a.length > 1 ? decodeURIComponent(a[1]) : true; // Value or true if no '='
                items[key] = value;
            } catch (e) {
                console_log_on_screen("Error decoding URL param: " + res[i]);
            }
        }
    }
    return items;
}

function formatDate(dateObj) {
    var fmt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "yyyy-MM-dd";
    if (!dateObj) {
        return "";
    }
    if (typeof dateObj === "number" || typeof dateObj === "string") {
        dateObj = new Date(Number(dateObj));
    }
    if (!(dateObj instanceof Date) || isNaN(dateObj.getTime())) {
        console_log_on_screen("Invalid date in formatDate: " + String(dateObj));
        return "Invalid Date";
    }
    var o = {
        "M+": dateObj.getMonth() + 1,
        "d+": dateObj.getDate(),
        "h+": dateObj.getHours(),
        "m+": dateObj.getMinutes(),
        "s+": dateObj.getSeconds(),
        "q+": Math.floor((dateObj.getMonth() + 3) / 3),
        S: dateObj.getMilliseconds()
    };
    if (/(y+)/.test(fmt)) {
        fmt = fmt.replace(RegExp.$1, (dateObj.getFullYear() + "").substr(4 - RegExp.$1.length));
    }
    for (var k in o) {
        if (new RegExp("(" + k + ")").test(fmt)) {
            var str = o[k] + "";
            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length === 1) ? str : pad(str, 2));
        }
    }
    return fmt;
}

function pad(numStr, size) {
    var s = String(numStr);
    while (s.length < size) {
        s = "0" + s;
    }
    return s;
}

// --- Main Render Function ---
function render() {
    if (!domApp || typeof calendar === 'undefined' || !config) {
        console_log_on_screen("Render: DOM, calendar, or config not ready.");
        return;
    }

    try {
        var actualCurrentTime = new Date();
        var currentDateNormalized = new Date(actualCurrentTime.getFullYear(), actualCurrentTime.getMonth(), actualCurrentTime.getDate());
        currentDateNormalized.setHours(0, 0, 0, 0);
        var millisecondsPerDay = 24 * 60 * 60 * 1000;
        var TimePassed = currentDateNormalized.getTime() - scriptLoadDateNormalized.getTime();

        var dailyAccumulatedOffsetms = 0;
        if (!isNaN(config.ofs) && config.ofs !== 0) {
            dailyAccumulatedOffsetms = (TimePassed/millisecondsPerDay) * config.ofs;
        }
        if (config.ofs !== 0 || true) { // `true` here means always log. Remove `|| true` to log only if ofs is non-zero.
            var logMessage = "ofs: " + config.ofs + "ms/day, TimePassed: " + TimePassed + ", AccumOffset: " + dailyAccumulatedOffsetms + "ms";
            console_log_on_screen(logMessage);
        }
        var time = new Date(actualCurrentTime.getTime() + dailyAccumulatedOffsetms);
        var len = time.getTime();
        var offset = time.getTimezoneOffset() * 60000;
        var utcTime = len + offset;
        var targetDate = new Date(utcTime + (3600000 * config.timezone));

        var lunar = calendar.solar2lunar(targetDate.getUTCFullYear(), targetDate.getUTCMonth() + 1, targetDate.getUTCDate());
        
        if (lunar === -1 || typeof lunar !== 'object') {
            console_log_on_screen("solar2lunar error for " + targetDate.toUTCString());
            if (domDate) domDate.innerHTML = "Error: Lunar Calc";
            if (domTime) domTime.innerHTML = pad(targetDate.getHours(), 2) + ":" + pad(targetDate.getMinutes(), 2);
            if (domCnDate) domCnDate.innerHTML = "";
            if (domFestival) domFestival.innerHTML = "";
            return;
        }

        var dateText = formatDate(targetDate, "yyyy.M.d") + " " +
                       (config.lang === "en" ?
                        ["SUN", "MON", "TUES", "WED", "THUR", "FRI", "SAT"][targetDate.getDay()] :
                        "星期" + ["日", "一", "二", "三", "四", "五", "六"][targetDate.getDay()]);
        
        var timeText = pad(targetDate.getHours(), 2) + ":" + pad(targetDate.getMinutes(), 2);
        var cnDateText = lunar.IMonthCn + lunar.IDayCn + " " + lunar.Animal + "\u5E74"; // 年
        var festivalText = lunar.festival || lunar.lunarFestival || "";
        
        if (domDate.innerHTML !== dateText) domDate.innerHTML = dateText;
        if (domTime.innerHTML !== timeText) domTime.innerHTML = timeText;
        if (domCnDate.innerHTML !== cnDateText) domCnDate.innerHTML = cnDateText;
        if (domFestival.innerHTML !== festivalText) domFestival.innerHTML = festivalText;

    } catch (e) {
        console_log_on_screen("Error in render function: " + e.message + (e.stack ? " Stack: " + e.stack.substring(0,100) : ""));
    }
}

// --- Initialization ---
document.addEventListener('DOMContentLoaded', function() {
    // Initialize scriptLoadDateNormalized here, once DOM is ready.
    var S_scriptLoadTime = new Date();
    scriptLoadDateNormalized = new Date(S_scriptLoadTime.getFullYear(), S_scriptLoadTime.getMonth(), S_scriptLoadTime.getDate());
    scriptLoadDateNormalized.setHours(0, 0, 0, 0);

    domApp = document.querySelector(".app");
    domTime = document.querySelector(".time");
    domDate = document.querySelector(".date");
    domCnDate = document.querySelector(".cn-date");
    domFestival = document.querySelector(".festival");

    if (!domApp || !domTime || !domDate || !domCnDate || !domFestival) {
        console_log_on_screen("Error: Critical DOM elements missing!");
        return; 
    }

    urlQuery = geturl(location.search); 
    
    config = {
        timezone: +(urlQuery.tz || 8),
        fontSize: +(urlQuery.fs || 7),
        rotate: urlQuery.r || "0", 
        lang: urlQuery.l || "zh", // Default to zh if not specified
        ofs: parseFloat(urlQuery.ofs || 0)
    };
    
    console_log_on_screen("Config: tz=" + config.timezone + ", fs=" + config.fontSize + ", r=" + config.rotate + ", ofs=" + config.ofs + ", lang=" + config.lang);

    domTime.style.fontSize = config.fontSize + "rem";
    domDate.style.fontSize = (config.fontSize / 2.5) + "rem";
    domCnDate.style.fontSize = (config.fontSize / 4) + "rem";
    domFestival.style.fontSize = (config.fontSize / 4) + "rem";

    var rotationValue = String(config.rotate || "0");
    domApp.style.webkitTransformOrigin = "50% 50%"; 
    domApp.style.transformOrigin = "50% 50%";
    
    var transformValue = "translate(-50%, -50%) rotate(" + rotationValue + "deg)";
    domApp.style.webkitTransform = transformValue;
    domApp.style.transform = transformValue;
    // console_log_on_screen("Applied transform: " + transformValue);


    try {
        render(); 
    } catch (e) {
        console_log_on_screen("Error during initial render: " + e.message);
    }

    setInterval(function() {
        render();
    }, 1000);

    if (typeof setupOLEDProtection === 'function') {
        try {
            setupOLEDProtection(); 
            // console_log_on_screen("setupOLEDProtection called.");
        } catch (e) {
            console_log_on_screen("Error calling setupOLEDProtection: " + e.message);
        }
    } else {
        // console_log_on_screen("setupOLEDProtection function not found (oled.js might not be loaded or has errors).");
    }
});
